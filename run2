#!/bin/bash

. rmd.cfg
. funcs.sh

SAVED_DIR=${SAVED_DIR:-.}
WAV_SUFFIX=${WAV_SUFFIX:-".wav"}

run_one() {
	local freq=$1
	echo $freq $offset
	local cmd="print(float($center-$freq-$offset)/$sample_rate)"
	local f_shift=$(python3 -c $cmd)
	local f="$freq"_$file
	local wav_pattern=/tmp/"$f"_$WAV_SUFFIX
#	eval $reader |csdr shift_addition_cc $f_shift|csdr fir_decimate_cc $dec_coef 0.005 HAMMING | csdr fmdemod_quadri_cf | csdr convert_f_s16 | tee /tmp/demod-$f | ./dsd -i- -fr -mc -w $wav_pattern 2>/tmp/log-$f
	eval $reader |csdr shift_addition_cc $f_shift|./demod -s $sample_rate -r 48000 -b 12500 | tee /tmp/demod-$f | ./dsd -i- -fr -mc -w $wav_pattern 2>/tmp/log-$f
	(sox -traw -es -L -b 16 -c 1 -r 48000 /tmp/demod-$f -t flac demod-$f.flac; rm /tmp/demod-$f) &
	(gather_result $f) &
}

USAGE="usage:
	run2 file
"
if [ $# -eq 0 ]; then echo "$USAGE"; exit -1; fi

file=$(basename $1)
IFS='_' read -a strarr <<< "$file"
center=${strarr[2]}
IFS='.' read -a strarr2 <<< "${strarr[3]}"
s_rate=${strarr2[0]}

case $file in
	*u8)
		reader="csdr convert_u8_f < $1"
		fmt="u8"
		;;
	*s16)
		reader="csdr convert_s16_f < $1"
		fmt="s16"
		;;
	*f32)
		reader="cat $1"
		fmt="f32"
		;;
esac

offset=0
rate=48000
dec_coef=$((s_rate/rate))
sample_rate=$((dec_coef*rate))
echo $s_rate $dec_coef $sample_rate

if [[ !($file =~ _$sample_rate) ]]; then echo "$USAGE"; exit -1; fi

if [ -z $2 ]; then
	./mk_heat $1
#	reqs=$(./dsd.awk -v center=$center -v sample_rate=$sample_rate ./bookmarks.csv)
	for freq in $(cat "$file"_gopow); do
		grep -q "$freq; A" bookmarks.csv && continue
		run_one $freq &
	done
	rm "$file"_gopow
	wait
	./clean.sh
else
	run_one $2
	wait
fi

